--[[
Zone Progression Mod

Created By: Chromodyne
Version: 0.01a (Alpha Build - Not for distribution.)
Created: 02/25/21
Updated: 03/01/21

Notes: Currently this addon only creates a rudimentary level and experience system for the player. Right now it only gives 'general' exp but I want to eventually make it able to have different skills to level up. 
I also eventually hope to make it able to account for NPCs gaining experience as well but time will tell if that's feasible. 

TODO
1. Figure out this damn config file bullshit.
2. Make sure everything remains after saving.
3. Vary experience by faction

]]--


-- FILE LINKS --
--Links necessary configuration files to this script.
local level_system_config = ini_file("levelmod\\level_system.ltx")     -- Links the configuration (ltx) file to this script.
--local exp_gains_config  = ini_file("levelmod\\level_experience.ltx") -- Links the experience value config to this script.


-- CONFIGURATION VARIABLES/ARRAYS --
local currentExp = 0;                       -- The player's current quantity of experience.
local currentLevel = 1;                     -- The player's current level. Must ALWAYS be >= 1 or bugs/crashes will occur.
local level_thresholds = {};                -- Array that holds the required experience to hit each level.
local maxLevel = level_system_config:r_float("config_parameters", "max_level");  -- Determines the max general level for the player.
local current_health_regen = 0
local total_stat_gains = {}

-- INITIALIZATION --
function on_game_start()

    RegisterScriptCallback("on_key_press", on_key_press)                            -- Connected to whenever 
    RegisterScriptCallback("npc_on_death_callback", npc_on_death_callback)          -- Connected to whenever NPCs die.
    RegisterScriptCallback("monster_on_death_callback", monster_on_death_callback)   -- Connected to whenever monsters/mutants die.
    RegisterScriptCallback("actor_on_update", actor_on_update) -- Connected to whenever the player updates. Good for looping.
    RegisterScriptCallback("save_state", save_state) -- Callback for saving data to disk via alife_storage_manager.
    RegisterScriptCallback("load_state", load_state) -- Callback for reloading data from disk via alife_storage manager.
    CheckBaseImmunities()
    ParseConfig()

end

-- SAVE LEVEL DATA -- 
function save_state(m_data)

    if (USE_MARSHAL) then

        local save_data = {}
        save_data.currentLevel = currentLevel or 1
        save_data.currentExp = currentExp or 0

        m_data.save_data = save_data

    end

    printf("Data saved correctly. LVLSYS")

end

-- LOAD LEVEL DATA --
function load_state(m_data)

    local save_data = m_data.save_data
    if save_data then
        currentLevel = save_data.currentLevel or 1
        currentExp = save_data.currentExp or 0
        SetupTotalStatGains()
        printf("Save data loaded correctly. LVLSYS")
    end

end

-- KEY PRESS FUNCTIONS --
function on_key_press(key)

    --These setup the ability to modify the key presses from the config file. TODO Unused
    --local show_current_exp = level_system_config:r_string("config_parameters","show_current_exp")
    --local show_remaining_exp = level_system_config:r_string("config_parameters","show_remaining_exp")

    local remaining_exp = level_thresholds[currentLevel + 1] - currentExp -- Determines exp to level.
    -- local debug_gain_exp = . . .

    if (key == DIK_keys["DIK_C"] ) then -- Grant 500exp when 'C' is pressed. DEBUG ONLY
        currentExp = currentExp + 500
        printf(show_current_exp)
    end

    -- TODO Hard code this until workaround is found.
    if (key == DIK_keys["DIK_V"] ) then -- Show player their currentExp and exptolevel when 'V' is pressed.
        actor_menu.set_fade_msg("Your current exp is: " .. currentExp .. " Remaining exp: " .. remaining_exp , 5, nil, "device\\pda\\spot_discovered")
    end

    -- Debug key to print various values to console.
    if (key == DIK_keys["DIK_B"] ) then
        --CheckStatValues()
        --SetupTotalStatGains()
        printf(total_stat_gains["max_weight"])
    end

end

-- EXPERIENCE GAIN ON NPC DEATH --
function npc_on_death_callback(victim, killer)

    CheckKiller(killer)

end

-- EXPERIENCE GAIN ON MONSTER DEATH --
function monster_on_death_callback(victim, killer)

    CheckKiller(killer)

end

-- GAME UPDATE LOOP --
-- Framerate dependent. Do not use for anything critical.
function actor_on_update()

    CheckForLevelUp()  --Checks to see if the player has gained enough experience to level up every update. May change to sleep only.
    --RegenerateHealth() --Can't use. See function comment. Was non optimal anyway.
end

-- LEVEL UP FUNCTION --
function CheckForLevelUp()

        if (currentExp >= level_thresholds[currentLevel + 1] and currentLevel < maxLevel) then

            currentLevel = currentLevel + 1 -- Increment current level if condition met.
            
            --If the player overshot the exp threshold then the excess is added to progress towards the next level.
            if (currentExp > level_thresholds[currentLevel]) then
                currentExp = currentExp - level_thresholds[currentLevel]
            else 
                currentExp = 0
            end

            LevelUp();

        else end

end

-- GRANT BONUSES ON LEVEL UP --
function LevelUp()

    printdbg("Beginning player level up sequence.")
    GainStats()
    --GainImmunities()
    LevelUpMessage() -- Shows message when player levels up.
    printdbg("Level up sequence completed successfully.")

    return

end

-- INCREASE PLAYER STATS --
function GainStats()

    --These will be used later for more accurate run speed increases.--
    --Currently the percentage gains are skewed as they are based off current instead of base. --
    --local base_run_coef = 2.41
    --local base_sprint_koef = 2.08

    -- RESTORE PLAYER HEALTH (If enabled in config.) --
    local restore_health = level_system_config:r_bool("config_parameters", "restore_health")
    if (restore_health == true) then
        db.actor:change_health(100)
    else end

    --CURRENT STAT VARIABLES--
    local current_max_weight = db.actor:get_actor_max_weight()       -- Get player's max carry weight.
    local current_run_coef = db.actor:get_actor_run_coef()           -- Get player's run speed factor.
    local current_sprint_coef = db.actor:get_actor_sprint_koef()     -- Get player's sprint speed factor.

    --STAT CHANGE VARIABLES--
    --Determines how much the applicable stat increases These are pulled from level_system_config.ltx
    max_weight_delta   = level_system_config:r_float("level_" .. tostring(currentLevel), "max_weight")
    run_speed_delta    = level_system_config:r_float("level_" .. tostring(currentLevel), "run_speed")
    sprint_speed_delta = level_system_config:r_float("level_" .. tostring(currentLevel), "sprint_speed")
    health_regen_delta = level_system_config:r_float("level_" .. tostring(currentLevel), "health_regen")

    -- Set new values. --
    db.actor:set_actor_max_weight(current_max_weight + max_weight_delta)        -- Increase max carry weight.
    db.actor:set_actor_run_coef(current_run_coef * run_speed_delta)             -- Multiply run speed.
    db.actor:set_actor_sprint_koef(current_sprint_coef * sprint_speed_delta)    -- Multiply spring speed.
    
    -- Check if player gains any regeneration.
    if (health_regen_delta > 0) then
        current_health_regen = health_regen_delta + current_health_regen
    end
    
   -- db.actor.cast_Actor().conditions():BoostExplImmunity(1000)
    --db.actor:max_health() = db.actor:max_health() + increaseHealth // max_health is a const so I need to find another way...

end

-- INCREASE PLAYER IMMUNITIES & RESISTANCES --
-- TODO : implement this!
function GainImmunities()

    --db.actor:cast_Actor():conditions():BoostExplImmunity(50)
    --db.actor:cast_Actor():conditions():BoostBurnImmunity(gain_burn_immunity)
    --db.actor:cast_Actor():conditions():BoostRadiationProtection(gain_radiation_protection)
    --db.actor:cast_Actor():conditions():BoostRadiationImmunity(10)

end

-- CHECK KILLER ON MOB/NPC DEATH -- 
function CheckKiller(killer)

    local id = killer:id()

    if (id == AC_ID) then -- Determines if the killer was the player or not. If not, experience is not gained.
        GrantExperience()
    end

end

-- GRANT PLAYER EXPERIENCE --
function GrantExperience()

    currentExp = currentExp + 500
    printf(currentExp)

end

-- PARSE CONFIGURATION FILE --
function ParseConfig()
    
    LevelThresholdsSetup()
    printdbg("Config successfully parsed.")

end

-- DETERMINE LEVEL THRESHOLDS --
function LevelThresholdsSetup()

    local i = 1
    while (i <= maxLevel) do
        level_thresholds[i] = level_system_config:r_float("level_" .. tostring(i),"exp_req")  -- Loop through checking exp_req from ltx file for each level.
        i = i + 1
    end

end

-- SHOW NOTIFICATION UPON LEVEL UP -- 
function LevelUpMessage()
    
    actor_menu.set_fade_msg("Leveled up to Level " .. currentLevel, 5, nil, "device\\pda\\spot_discovered")

end

-- DETERMINE DIFFICULTY LEVEL --
--This function is needed because it seems to be the only easy way to find the current save's actor's base stats.
function CheckBaseImmunities()

    local base_immunities = {}
    base_immunities["base_immunities"] = game_difficulties.get_game_factor("actor_immunities")
    
    printf("Base immunities imported. =)")

end

-- PRINT ALL STAT VALUES - DEBUG ONLY --
function CheckStatValues()

    printf("Max weight: " .. db.actor:get_actor_max_weight())
    printf("Run coef: " .. db.actor:get_actor_run_coef())
    printf("Sprint koef: " .. db.actor:get_actor_sprint_koef())
    printf("Health regen: " .. current_health_regen)

end

-- REGENERATE PLAYER HP OVER TIME --
-- This doesn't work because actor_on_update is tied directly to framerate. Potato PCs won't get the proper regen.
--[[
function RegenerateHealth()

    if (current_health_regen > 0) then
        db.actor:change_health(current_health_regen)
    end

end
]]

--This needs to be done in case the player messes with the difficulty sliders in game. Audits data and allows it to save.
--TODO: Check if player messed with relevant difficulty sliders then invoke this function.
function SetupTotalStatGains()

    --TODO: ADD ALL NECESSARY STATS HERE
    total_stat_gains["max_weight"]      = AddUpGains("max_weight")
    --total_stat_gains["run_speed"]       = AddUpGains("run_speed"),
    --total_stat_gains["sprint_speed"]    = AddUpGains("sprint_speed"),
    --total_stat_gains["bleed_restore"]   = AddUpGains("bleed_restore"),
    --total_stat_gains["health_regen"]    = AddUpGains("health_regen")
    --total_stat_gains["sprint_speed"]    = AddUpGains("sprint_speed"),
    --total_stat_gains["sprint_speed"]    = AddUpGains("sprint_speed"),
    --total_stat_gains["sprint_speed"]    = AddUpGains("sprint_speed"),

end

--Iterates through all stat gains the player should have accumulated by their current level. Good for saving data/auditing data.
function AddUpGains(stat) --Invoked by SetupTotalStatGains()

    local i = 1
    local totalGains = 0
    
    while (i <= currentLevel) do
        totalGains = totalGains + level_system_config:r_float("level_" .. tostring(i), stat)
        i = i + 1
    end

    return totalGains

end