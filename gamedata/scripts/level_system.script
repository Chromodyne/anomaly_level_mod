--[[
Zone Progression Mod

Created By: Chromodyne
Version: 0.02a (Alpha Build - Not for distribution.)
Created: 02/25/21
Updated: 02/27/21

Notes: Currently this addon only creates a rudimentary level and experience system for the player. Right now it only gives 'general' exp but I want to eventually make it able to have different skills to level up. 
I also eventually hope to make it able to account for NPCs gaining experience as well but time will tell if that's feasible. 

TODO
1. Figure out this damn config file bullshit.
2. Make sure everything remains after saving.
3. Vary experience by faction

]]--


-- FILE LINKS --
--Links necessary configuration files to this script.
local stat_gains_config = ini_file("levelmod\\level_system.ltx")     -- Links the configuration (ltx) file to this script.
--local exp_gains_config  = ini_file("levelmod\\level_experience.ltx") -- Links the experience value config to this script.
level_thresholds = {}
--immunities_gained = {}

-- CONFIGURATION VARIABLES --
local currentExp = 0;                       -- The player's current quantity of experience.
local currentLevel = 1;                     -- The player's current level. Must ALWAYS be >= 1 or bugs/crashes will occur.
local maxLevel = 4;                         -- Determines the max general level for the player.
--local breakPoints = {1000, 2000, 3000};     -- DEPRECATED, COMES FROM CONFIG NOW. 

-- INITIALIZATION --
function on_game_start()

    RegisterScriptCallback("on_key_press", on_key_press)                            -- Connected to whenever 
    RegisterScriptCallback("npc_on_death_callback", npc_on_death_callback)          -- Connected to whenever NPCs die.
    RegisterScriptCallback("monster_on_death_callback", monster_on_death_callback)   -- Connected to whenever monsters/mutants die.
    RegisterScriptCallback("actor_on_update", actor_on_update) -- Connected to whenever the player updates. Good for looping.
    ParseConfig()

end


-- GRANT EXPERIENCE ON 'C' KEY PRESS (DEBUG) --
function on_key_press(key)

    if (key == DIK_keys["DIK_C"] ) then
        currentExp = currentExp + 500
        printf(currentExp)
    end

end

-- EXPERIENCE GAIN ON NPC DEATH --
--TODO : Make it where the # of exp depends on faction, "level", etc.
function npc_on_death_callback(victim, killer)

    CheckKiller(killer)

end

-- EXPERIENCE GAIN ON MONSTER DEATH --
--TODO: Vary exp based on monster/mutant that was killed. e.g. Chimera exp >> Blind Dog
function monster_on_death_callback(victim, killer)

    CheckKiller(killer)

end

-- GAME UPDATE LOOP --
-- Runs various functions constantly to see if the player has gained experience, levelled up, etc.
function actor_on_update()

    CheckForLevelUp() -- Checks to see if the player has gained enough experience to level up.

end

-- LEVEL UP FUNCTION --
function CheckForLevelUp()

        if (currentExp == level_thresholds[currentLevel + 1] and currentLevel < maxLevel) then
            currentLevel = currentLevel + 1
            currentExp = 0 -- Didn't want to have to make each new level go back to zero exp but for some reason it loops if I do not.
            LevelUp(currentLevel);
        else end

end

-- GRANT BONUSES ON LEVEL UP --
function LevelUp(level)

    printf("Beginning player level up sequence.")

    --GainStats()
    --GainImmunities()
    printf(currentLevel)
    printf("Level up sequence completed successfully.")
    
    return

end

-- INCREASE STATS (NO IMMUNITIES) --
function GainStats()

    --CURRENT STAT VARIABLES--
    local currentMaxWeight = db.actor:get_actor_max_weight()         -- Get player's max carry weight.
    local current_run_coef = db.actor:get_actor_run_coef()           -- Get player's run speed factor.
    local current_sprint_coef = db.actor:get_actor_sprint_koef()     -- Get player's sprint speed factor.

    --STAT CHANGE VARIABLES--
    --Determines how much the These are pulled from level_system.ltx
    max_weight_delta   = level_system:r_float(tostring(currentLevel), "max_weight")
    run_speed_delta    = level_system:r_float(tostring(currentLevel), "run_speed")
    sprint_speed_delta = level_system:r_float(tostring(currentLevel), "sprint_speed")
    health_regen_delta = level_system:r_float(tostring(currentLevel), "health_regen")

    --db.actor:change_health(100) -- Testing. This restores the player HP back to maximum on levelup.
    --db.actor:set_actor_max_weight(currentMaxWeight + increase_weight) -- Testing. This increases the characters maximum carry weight.
    --db.actor:set_actor_run_coef(current_run_coef + run_speed_increase)
    --db.actor:set_actor_sprint_koef(current_sprint_coef + sprint_speed_increase)
    --TODO For the above, might want to use the 'boost' classes
    --db.actor:max_health() = db.actor:max_health() + increaseHealth // max_health is a const so I need to find another way...
    --db.actor:set_actor_jump_speed(current_jump_speed + 1000)

end

-- INCREASE PLAYER IMMUNITIES --
function GainImmunities()

    --TODO: Currently these are baked for every level. Use the LTX file for configuring this.
    --[[local gain_chemical_burn_protection = 1
    local gain_chemical_burn_immunity = 
    local gain_explosion_immunity = 
    local gain_fire_wound_immunity = 
    local gain_radiation_protection = 
    local gain_radiation_immunity = 
    local gain_shock_immunity = 
    local gain_wound_immunity = 
    local gain_psy_protection = 
    local gain_psy_immunity = ]]

    --local casting = db.actor:cast_Ator():conditions()

    --db.actor:cast_Actor():conditions():BoostExplImmunity(50)
    --db.actor:cast_Actor():conditions():BoostBurnImmunity(gain_burn_immunity)
    --db.actor:cast_Actor():conditions():BoostRadiationProtection(gain_radiation_protection)
    --db.actor:cast_Actor():conditions():BoostRadiationImmunity(10)

end

-- CHECK IF PLAYER WAS KILLER -- 
function CheckKiller(killer)

    local id = killer:id()

    if (id == AC_ID) then -- Determines if the killer was the player or not. If not, experience is not gained.
        GrantExperience()
    end

end

-- GRANT PLAYER EXPERIENCE --
function GrantExperience()

    currentExp = currentExp + 500
    printf(currentExp)

end

-- PARSE CONFIGURATION FILE --
-- Adds data from level_system.ltx to an array that is used to determine level up bonuses.
function ParseConfig()
    
    LevelThresholdsSetup()

end

function LevelThresholdsSetup()

    local i = 1
    while (i <= maxLevel) do
        level_thresholds[i] = stat_gains_config:r_float(tostring(i),"exp_req")
        i = i + 1
    end

end