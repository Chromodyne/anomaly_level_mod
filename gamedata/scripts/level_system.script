--[[
Zone Progression Mod

Created By: Chromodyne
Version: 0.02a (Alpha Build - Not for distribution.)
Created: 02/25/21
Updated: 02/27/21

Notes: Currently this addon only creates a rudimentary level and experience system for the player. Right now it only gives 'general' exp but I want to eventually make it able to have different skills to level up. 
I also eventually hope to make it able to account for NPCs gaining experience as well but time will tell if that's feasible. 

TODO
1. Figure out this damn config file bullshit.
2. Make sure everything remains after saving.
3. Vary experience by faction

]]--


-- FILE LINKS --
--Links necessary configuration files to this script.
local level_system_config = ini_file("levelmod\\level_system.ltx")     -- Links the configuration (ltx) file to this script.
--local exp_gains_config  = ini_file("levelmod\\level_experience.ltx") -- Links the experience value config to this script.
level_thresholds = {}
--immunities_gained = {}

-- CONFIGURATION VARIABLES --
local currentExp = 0;                       -- The player's current quantity of experience.
local currentLevel = 1;                     -- The player's current level. Must ALWAYS be >= 1 or bugs/crashes will occur.
local maxLevel = level_system_config:r_float("config_parameters", "max_level");  -- Determines the max general level for the player.

-- INITIALIZATION --
function on_game_start()

    RegisterScriptCallback("on_key_press", on_key_press)                            -- Connected to whenever 
    RegisterScriptCallback("npc_on_death_callback", npc_on_death_callback)          -- Connected to whenever NPCs die.
    RegisterScriptCallback("monster_on_death_callback", monster_on_death_callback)   -- Connected to whenever monsters/mutants die.
    RegisterScriptCallback("actor_on_update", actor_on_update) -- Connected to whenever the player updates. Good for looping.
    ParseConfig()

end


-- GRANT EXPERIENCE ON 'C' KEY PRESS (DEBUG ONLY) --
function on_key_press(key)

    if (key == DIK_keys["DIK_C"] ) then
        currentExp = currentExp + 500
        printf(currentExp)
    end

end

-- EXPERIENCE GAIN ON NPC DEATH --
function npc_on_death_callback(victim, killer)

    CheckKiller(killer)

end

-- EXPERIENCE GAIN ON MONSTER DEATH --
function monster_on_death_callback(victim, killer)

    CheckKiller(killer)

end

-- GAME UPDATE LOOP --
-- Runs various functions constantly to see if the player has gained experience, levelled up, etc.
function actor_on_update()

    CheckForLevelUp() -- Checks to see if the player has gained enough experience to level up.

end

-- LEVEL UP FUNCTION --
function CheckForLevelUp()

        if (currentExp == level_thresholds[currentLevel + 1] and currentLevel < maxLevel) then
            currentLevel = currentLevel + 1
            currentExp = 0 -- Didn't want to have to make each new level go back to zero exp but for some reason it loops if I do not.
            LevelUp(currentLevel);
        else end

end

-- GRANT BONUSES ON LEVEL UP --
-- TODO: Make it so the level up dialog pops up on the screen.
function LevelUp(level)

    printf("Beginning player level up sequence.")
    GainStats()
    --GainImmunities()
    printf(currentLevel)
    LevelUpMessage() -- Shows message when player levels up.
    printf("Level up sequence completed successfully.")
    
    return

end

-- INCREASE PLAYER STATS --
function GainStats()

    --local actor = db.actor
    -- RESTORE PLAYER HEALTH IF ENABLED --
    local restore_health = level_system_config:r_float("config_parameters", "restore_health")
    if (restore_health == 1) then
        db.actor:change_health(100)
    else end

    --CURRENT STAT VARIABLES--
    local current_max_weight = db.actor:get_actor_max_weight()         -- Get player's max carry weight.
    local current_run_coef = db.actor:get_actor_run_coef()           -- Get player's run speed factor.
    local current_sprint_coef = db.actor:get_actor_sprint_koef()     -- Get player's sprint speed factor.

    --STAT CHANGE VARIABLES--
    --Determines how much the These are pulled from level_system_config.ltx
    max_weight_delta   = level_system_config:r_float(tostring(currentLevel), "max_weight")
    run_speed_delta    = level_system_config:r_float(tostring(currentLevel), "run_speed")
    sprint_speed_delta = level_system_config:r_float(tostring(currentLevel), "sprint_speed")
    health_regen_delta = level_system_config:r_float(tostring(currentLevel), "health_regen")
    --bleed_restore_delta = 

    db.actor:set_actor_max_weight(current_max_weight + max_weight_delta) -- This works
    --db.actor:cast_Actor():conditions():BoostMaxWeight(max_weight_delta) -- This appears not to.
    --db.actor:set_actor_run_coef(current_run_coef + 10)
    --db.actor:set_actor_sprint_koef(current_sprint_coef + sprint_speed_increase)
    --TODO For the above, might want to use the 'boost' classes
    --db.actor:max_health() = db.actor:max_health() + increaseHealth // max_health is a const so I need to find another way...
    --db.actor:set_actor_jump_speed(current_jump_speed + 1000)

end

-- INCREASE PLAYER IMMUNITIES & RESISTANCES --
function GainImmunities()

    --db.actor:cast_Actor():conditions():BoostExplImmunity(50)
    --db.actor:cast_Actor():conditions():BoostBurnImmunity(gain_burn_immunity)
    --db.actor:cast_Actor():conditions():BoostRadiationProtection(gain_radiation_protection)
    --db.actor:cast_Actor():conditions():BoostRadiationImmunity(10)

end

-- CHECK IF PLAYER WAS KILLER -- 
function CheckKiller(killer)

    local id = killer:id()

    if (id == AC_ID) then -- Determines if the killer was the player or not. If not, experience is not gained.
        GrantExperience()
    end

end

-- GRANT PLAYER EXPERIENCE --
function GrantExperience()

    currentExp = currentExp + 500
    printf(currentExp)

end

-- PARSE CONFIGURATION FILE --
function ParseConfig()
    
    LevelThresholdsSetup()
    printdbg("parsed")

end

-- SETS UP ARRAY THAT DETERMINES LEVEL UP EXP REQS --
function LevelThresholdsSetup()

    local i = 1
    while (i <= maxLevel) do
        level_thresholds[i] = level_system_config:r_float(tostring(i),"exp_req")
        i = i + 1
    end

end

-- SHOW NOTIFICATION UPON LEVEL UP -- 
function LevelUpMessage() 
    
    actor_menu.set_fade_msg("Leveled up to Level " .. currentLevel, 5, nil, "device\\pda\\spot_discovered")

end
